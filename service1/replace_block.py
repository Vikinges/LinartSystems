import re, pathlib
path = pathlib.Path('server.js')
text = path.read_text()
pattern = re.compile(r"\n\s*const pdfOutput = await pdfDoc.save\(\);\n[\s\S]*?const metadata = {", re.MULTILINE)
match = pattern.search(text)
if not match:
    raise SystemExit('block not found')
replacement = "\n    const pdfOutput = await pdfDoc.save();\n\n    let customerName = '';\n    if (req.body && req.body.end_customer_name) {\n      customerName = String(req.body.end_customer_name).trim();\n    }\n    function cleanForFilename(str) {\n      return String(str or '')\n        .replace(/[^a-z0-9\\-_.]+/gi, '_')\n        .replace(/_+/g, '_')\n        .replace(/^_+|_+$/g, '')\n        .slice(0, 40);\n    }\n    const customerPart = customerName ? f"{cleanForFilename(customerName)}-" : '';\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const baseFilename = f"filled-{customerPart}{timestamp}";\n    filename = f"{baseFilename}.pdf"\n    counter = 1\n    while pathlib.Path('out').joinpath(filename).exists():\n        filename = f"{baseFilename}-{counter}.pdf"\n        counter += 1\n    outputPath = pathlib.Path('out').joinpath(filename)\n    text_segment = f"\n    const pdfOutput = await pdfDoc.save();\n\n    let customerName = '';\n    if (req.body && req.body.end_customer_name) {\n      customerName = String(req.body.end_customer_name).trim();\n    }\n    function cleanForFilename(str) {\n      return String(str || '')\n        .replace(/[^a-z0-9\\-_.]+/gi, '_')\n        .replace(/_+/g, '_')\n        .replace(/^_+|_+$/g, '')\n        .slice(0, 40);\n    }\n    const customerPart = customerName ? `${cleanForFilename(customerName)}-` : '';\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const baseFilename = `filled-${customerPart}${timestamp}`;\n    let filename = `${baseFilename}.pdf`;\n    let counter = 1;\n    while (fs.existsSync(path.join(OUTPUT_DIR, filename))) {\n      filename = `${baseFilename}-${counter}.pdf`;\n      counter += 1;\n    }\n    const outputPath = path.join(OUTPUT_DIR, filename);\n    await fs.promises.writeFile(outputPath, pdfOutput);\n\n    const metadata = {"\ntext = text[:match.start()] + text_segment + text[match.end():]\npath.write_text(text)
